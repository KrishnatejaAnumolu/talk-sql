// pages/query.tsx
import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Layout from "../components/layout";
import QueryInput from "../components/QueryInput";
import ResultsTable from "../components/ResultsTable";
import LoadingSpinner from "../components/LoadingSpinner";
import ErrorMessage from "../components/ErrorMessage";
import { getAppState, setAppState } from "./index"; // Import state helpers
import { DBConnectionParams } from "../lib/db";
import type { FieldPacket } from "mysql2";
import { Database, ChevronLeft, RefreshCw } from "lucide-react";

interface QueryPageState {
  results: any[];
  fields?: FieldPacket[];
  generatedSql: string | null;
  loadingQuery: boolean;
  queryError: {
    title?: string;
    message: string;
    suggestions?: string[];
  } | null;
}

const QueryPage: React.FC = () => {
  const router = useRouter();
  const [dbConfig, setDbConfig] = useState<DBConnectionParams | null>(null);
  const [schema, setSchema] = useState<string | null>(null);
  const [pageState, setPageState] = useState<QueryPageState>({
    results: [],
    fields: undefined,
    generatedSql: null,
    loadingQuery: false,
    queryError: null,
  });

  useEffect(() => {
    const { dbConfig: currentDbConfig, schema: currentSchema } = getAppState();
    if (!currentDbConfig || !currentSchema) {
      router.replace("/"); // Redirect if not connected
    } else {
      setDbConfig(currentDbConfig);
      setSchema(currentSchema);
    }
  }, [router]);

  const handleDisconnect = () => {
    setAppState({ dbConfig: null, schema: null });
    router.push("/");
  };

  const handleQuerySubmit = async (naturalLanguageQuery: string) => {
    if (!schema || !dbConfig) {
      setPageState((prev) => ({
        ...prev,
        queryError: { message: "Database connection or schema not found." },
      }));
      return;
    }

    setPageState((prev) => ({
      ...prev,
      loadingQuery: true,
      queryError: null,
      generatedSql: null,
      results: [],
    }));

    try {
      // 1. Generate SQL
      const sqlResponse = await fetch("/api/generate-sql", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ schema, naturalLanguageQuery }),
      });
      const sqlData = await sqlResponse.json();

      if (!sqlResponse.ok || !sqlData.sqlQuery) {
        console.log("SQL generation error:", sqlData);
      }
      setPageState((prev) => ({ ...prev, generatedSql: sqlData.sqlQuery }));

      // 2. Execute SQL
      const execResponse = await fetch("/api/execute-sql", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sqlQuery: sqlData.sqlQuery, dbConfig }),
      });
      const execData = await execResponse.json();

      if (!execResponse.ok) {
        throw new Error(execData.error || "Failed to execute SQL query.");
      }
      setPageState((prev) => ({
        ...prev,
        results: execData.results,
        fields: execData.fields,
        loadingQuery: false,
      }));
    } catch (err: any) {
      console.error("Query processing error:", err);
      let errorTitle = "Query Error";
      let suggestions: string[] = [
        "Try rephrasing your question.",
        "Ensure your database schema is correctly loaded and accessible.",
        "Check the AI model's capabilities or potential restrictions.",
      ];

      if (
        err.message.includes(
          "Invalid query. Only SELECT statements are allowed"
        )
      ) {
        errorTitle = "Security Restriction";
        suggestions = [
          "The AI attempted to generate a query that could modify data. This is not allowed.",
          "Please ask a question that only requires reading data.",
        ];
      } else if (err.message.includes("Failed to generate SQL query")) {
        errorTitle = "AI Model Error";
        suggestions = [
          "The AI model couldn't understand your request or generate a valid SQL query.",
          "Try being more specific or rephrasing your question.",
          "This could also be a temporary issue with the AI service.",
        ];
      } else if (err.message.includes("Database error:")) {
        errorTitle = "Database Execution Error";
        suggestions = [
          "The SQL query generated by the AI might be invalid for your specific database.",
          "Check if the tables or columns mentioned exist and if the user has permissions.",
        ];
      }

      setPageState((prev) => ({
        ...prev,
        loadingQuery: false,
        queryError: { title: errorTitle, message: err.message, suggestions },
        results: [],
        fields: undefined,
      }));
    }
  };

  if (!dbConfig || !schema) {
    return (
      <Layout>
        <LoadingSpinner message="Loading connection details..." />
      </Layout>
    );
  }

  return (
    <Layout title="Query Database">
      <div className="mb-8 p-6 bg-slate-800 rounded-lg shadow-xl">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center">
            <Database className="w-8 h-8 text-sky-400 mr-3" />
            <div>
              <h1 className="text-2xl font-semibold text-sky-300">
                Query Your Data
              </h1>
              <p className="text-sm text-slate-400">
                Connected to: {dbConfig.database}@{dbConfig.host}
              </p>
            </div>
          </div>
          <button
            onClick={handleDisconnect}
            className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white text-sm font-medium rounded-lg flex items-center transition-colors"
          >
            <ChevronLeft className="w-4 h-4 mr-1" /> Disconnect
          </button>
        </div>

        <QueryInput
          onSubmit={handleQuerySubmit}
          loading={pageState.loadingQuery}
        />

        {pageState.generatedSql && !pageState.queryError && (
          <div className="mb-6 p-4 bg-slate-700 rounded-md">
            <p className="text-xs text-slate-400 mb-1">Generated SQL:</p>
            <code className="text-sm text-emerald-300 block whitespace-pre-wrap break-all">
              {pageState.generatedSql}
            </code>
          </div>
        )}
      </div>

      {pageState.loadingQuery && <LoadingSpinner message="Fetching data..." />}

      {pageState.queryError && (
        <ErrorMessage
          title={pageState.queryError.title}
          message={pageState.queryError.message}
          suggestions={pageState.queryError.suggestions}
        />
      )}

      {!pageState.loadingQuery &&
        !pageState.queryError &&
        (pageState.results.length > 0 || pageState.generatedSql) && (
          <ResultsTable results={pageState.results} fields={pageState.fields} />
        )}
      {!pageState.loadingQuery &&
        !pageState.queryError &&
        !pageState.generatedSql &&
        pageState.results.length === 0 && (
          <div className="text-center py-10 text-slate-400">
            <p>Enter a question above to get started.</p>
          </div>
        )}

      {schema && (
        <details className="mt-8 bg-slate-800 p-4 rounded-lg shadow-xl">
          <summary className="cursor-pointer text-sky-400 hover:text-sky-300 font-medium flex items-center">
            <RefreshCw className="w-4 h-4 mr-2" /> View/Refresh Database Schema
          </summary>
          <pre className="mt-3 p-3 bg-slate-900/50 rounded text-xs text-slate-300 max-h-96 overflow-auto">
            {schema}
          </pre>
        </details>
      )}
    </Layout>
  );
};

export default QueryPage;
